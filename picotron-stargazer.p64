picotron cartridge // www.picotron.net
version 2

:: entities/
:: entities/base.lua
--[[pod_format="raw",created="2025-04-14 21:29:02",modified="2025-04-21 18:12:31",revision=1127]]
function build_entity()
	return {
        x = 0, y = -64,
        dx = 0, dy = 0,
        grounded = true,
        width = 0.8,
        height = 0.8,
        walk_speed = 1,
        jump_force = -2.4,
	}
end

function walking_animator(e, idle_frame, start_frame, frame_limit, air_frame, x_offset, y_offset)
	e.wa_frame = 0
	e.wa_limit = frame_limit
	
	e.wa_start_frame = start_frame
	e.wa_idle_frame = idle_frame
	e.wa_air_frame = air_frame
	
	e.wa_x_offset = x_offset
	e.wa_y_offset = y_offset
	
	e.wa_left = false
	return function(e)
		if abs(e.dx) < 0.05 then
			e.dx = 0
		end
		if (not e.grounded) then
			if (e.dy > 0) then
				if (e.dy > 3.5) then
					spr(e.wa_air_frame+2,x_offset, y_offset, e.wa_left)
				else
					spr(e.wa_air_frame+1,x_offset, y_offset, e.wa_left)
				end
			else
				spr(e.wa_air_frame,x_offset, y_offset, e.wa_left)
			end
		else
			if (e.dx < 0) e.wa_left = true
			if (e.dx > 0) e.wa_left = false
			if (abs(e.dx)>0.1) then
				e.wa_frame += abs(e.dx)/3
				if (e.wa_frame >= e.wa_limit) then
					e.wa_frame = 0
				end
				spr(flr(e.wa_start_frame+e.wa_frame), x_offset, y_offset, e.wa_left)
			else
				e.wa_frame = 0
				spr(e.wa_idle_frame, e.wa_x_offset, e.wa_y_offset, e.wa_left)
			end
		end
	end
end
:: entities/player.lua
--[[pod_format="raw",created="2025-04-14 21:28:33",modified="2025-04-21 18:12:31",revision=1474]]
include "entities/base.lua"


local anchoring = {
	-- POINTING ORDER: left left-up up right-up right
	--
	{} 	
}
local swing_frames_right = {
	 {24, {0,  0, 13, 0.5, 0.5}}, -- L
 	 {25, {0,  3,  5, 0.5, 0.5}}, -- L U
 	 {26, {0, 10,  1, 0.5, 0.5}}, --   U
 	 {27, {0, 18,  3, 0.5, 0.5}}, -- R U
 	 {28, {0, 19, 13, 0.5, 0.5}}, -- R
}

local swing_frames_left = {
 	 {24, {0, 16, 13, 0.5, 0.5}}, -- R
 	 {25, {0, 13,  5, 0.5, 0.5}}, -- R U
 	 {26, {0,  6,  1, 0.5, 0.5}}, --   U
 	 {27, {0, -2,  3, 0.5, 0.5}}, -- L U
	 {28, {0, -3, 13, 0.5, 0.5}}, -- L
}

function recalc_frame_data()
	__re(swing_frames_right)
	__re(swing_frames_left)
end

local function swing_animator(e)
	e.swing_timer = 0
	e.swinging = false
	return function()
		-- Draw swing
		local data_source = e.wa_left and swing_frames_left or swing_frames_right
		e.swing_timer += 0.4
		if e.swing_timer < #swing_frames_right then
			local frame_number = flr(e.swing_timer)+1
			local frame_data   = data_source[frame_number]
			
			local frame_number_chr          = frame_data[1]
			local frame_data_pickaxe        = frame_data[2]
			local s_number                  = frame_data_pickaxe[1]
			local frame_data_pickaxe_x      = frame_data_pickaxe[2]
			local frame_data_pickaxe_y      = frame_data_pickaxe[3]
			local frame_data_anchor_x       = frame_data_pickaxe[4]
			local frame_data_anchor_y       = frame_data_pickaxe[5]
			
	
			local s        = get_spr(s_number)
			local s_width  = s:width()
			local s_height = s:height()
			
			local spr_x_offset = -s_width * frame_data_anchor_x
			local spr_y_offset = -s_height * frame_data_anchor_y

			--spr(s_number, -5+frame_data_pickaxe_x+spr_x_offset, -8+frame_data_pickaxe_y+spr_y_offset)
			circfill(-5+frame_data_pickaxe_x,-8+frame_data_pickaxe_y,1)
			spr(frame_number_chr,-5,-8,e.wa_left)
		else
			e.swinging = false
		end
	end,
	function ()
		-- Trigger swing
		e.swing_timer = 0
		e.swinging = true
	end
end

function build_player()
	local base = build_entity()
	
	base.width = 0.7
	base.update = update
	
	local draw_swing, trigger_swing = swing_animator(base)
	
	local wa = walking_animator(base, 1, 2, 6, 9, -5, -8)
	base.draw = function(e)
		if (e.swinging) then
			draw_swing()	
		end
		if not e.swinging then
			wa(e)
		end
		prints(e.x .. " " .. e.y, -32, -32)
	end
	base.update = function(e)
		-- Player input
		-- e.dx = (input & 1 and e.walk_speed) or (input & 2 and -e.walk_speed) or 0
		e.dx *= 0.8
		if (key("a")) then 
			e.dx -= e.walk_speed*0.2
		elseif (key("d")) then 
			e.dx += e.walk_speed*0.2
		end
		
		-- Jumping
		if e.grounded and key("w") then
			e.dy = e.jump_force
			e.grounded = false
		end 
		
		if not (key("w") or e.grounded) and e.dy < -1 then
			e.dy = -1
		end
		
		if (keyp("t")) trigger_swing()
	end
	
	base.equipped_sprite = 16
	return base
end
:: entities/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTE0IDIxOjI4OjIzIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSJdXQ==
:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA5IDE4OjU5OjA1Iixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSIscmV2aXNpb249MjA4Ml1dbHo0APcDAADMOAAA_CZ7WzBdPXtibXA9cHh1
AEMgEBAE8FYHEAfAF9AXwAcQB-BWLGZsYWdzPTAscGFuX3g9MC4wNgEAETcYAPwQeT04LjMyNjY3
MjY4NDY4ODdlLTE3LHpvb209MTV9LGEA-xoaGaAaCQYHCZApFwmAfxmAFw8VFw6QFw4XDpAPEEeQ
Bw03kF2ALhAuMH0AZG9tcC4gLiB9AEAfRvoAEU_QLi3Q_wBCH0d_ABQfwH4AQh9XfgARP6A_QHcB
Zl89LoAucHcBZk8tAC5wfwBB8Ao-H3B_YE4ATjBeEE4QbiCuUI6AXpBegG6AFgD-Aj4wXiA_EF4w
TgBOUI5wbpAefQFf-wMADlAODQcNNw0OUA59DlAO8AyEAEAbNoQAP5BHkIYAYBsmhgAv8AqHAGIf
8FQAkKwEBAQ3Pxw8HxARWQADSQAfMIsABw8yABqyCgoEIAZgBgdwBgcGAM91F38VF4AXcBeQB1BK
AAweNkoA8ho3IAY3QAYHDxVQBgcOBQ5AFwAOBQ4wBgcQDgUOIAYwDgUOEAdADgUOcAQAD2EAHvoJ
FhcwFlcQFwAPFQUAFwAGIA4FIAcwDgVwAwAfMFgAHfEDEAcWBwZgNwZgDxUHBlAOBQ4HrAAwABcg
sgAQF74AIDAHywAQQNYAT2AFDnBiAB0xUAaQXwHAgAYHdQYHfxUXcBdgBAAvByBKAB0zBQ8VPgEy
DkAHmgABpgAhBgezABEGYAHPBgdQDgYHQCYXIBYnYgAeMzAPFUkBBlIBAWsB-wAGABYADgUABgcQ
FzYXMDdZAB5QcA8VBWCeABFAqgASMLcAAhwCEwcqAt8OBQ5QFw5gBjdgJhcQYQAaAP0CH1XeCBUP
IwIODzkJIV6ADl2QHjoJD1wADw0cCIknDxUXkCcOF1oAHxBaACCwWCoJoCoJBgeQORdYAIk3DxUH
kDcOB1gAHwBYACAaaVgAIVeQWgD-Ag8QJw8VB4AOBw8QN4AeTQ4AWAAeH-AyAH70ACAgBPD-awbw
DQYH8A4GBwgA-wZl8AcXbxXwBxfwDxfwDhfwEAfw-1ZZAAseN1gAoP-LBjfwCQY38As1BSHwDAAD
IfALNwUi8AocAyHwCSoDIfAI2gMj8A4FAA9sAB_TwBYX8AoWV-AIQAUi8AdBBW7wCg4F8A4EAB-g
YwAfELRJBWDwDTcG8A1LBSHwDEwFAGEAUA4AF-AJ8QMxF-AItQQh8AfCBCDwBtAAEA3UAA9vAB5D
VwbwEJYBYA8GB-AGdQUAIX8VkAESDQYATwfw-2pYAAwPUgIfDzIA------------------------
--------------------------------qFA9MTZ9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEyIDIwOjA4OjQzIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSIscmV2aXNpb249MjA0OV1dbHo0AMEBAAArMwAA8xN7WzBdPXtibXA9cHh1
AEMgAQEEACxmbGFncz0wLHBhbl94CADHeT0wLHpvb209OH0sMACBCAgEew8bCw4CAEEPFA4NAgAh
Aw0CAC-9EUsACywxNkwAP-8UMDMAHf8BDxQUHg8VDh0OBC4dDhQeDQoABw9aAB7wExsLAwAOCwMQ
DgAPFQMOAB0ACw4NAwsOAA0ODQANDgMOCw0fAFAAAw4ADR8AFQMfABADBAAPbwAdf40B-RMB-QKm
ACEgDxQGAPAEHxUPGwQPFAMPGy8VBAsPGw8UAwYAEBUeANAvFA8bAw4LBA8UDgsDzgAAKQBgDi8V
AwsOJwAQDiYAPw4DHbYAH_FpDxlaCQ5aDgl_KQ45GgoALzp_RQAaXxAQBPDwMgBMAVsCrxUPFV8U
HxX-FAKgAB8PMgD-RwDCAk8V-xQvZwAfDy8B5UA-GD8UBADxAi8YTxQfGL8UHxVPFC8VPxQ-BAAP
gABPj48UDxj-FBMPSQP-gDD-FAqbAQ8EAiAPlgH-TBADeQYvDxWaASIPMgD-----------------
-------------------------------------5tQPTE2fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA5IDE5OjUyOjUzIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSJdXQ==
:: map/
:: map/debug.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTEzIDE3OjA0OjExIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSIscmV2aXNpb249MTM5Ml1dbHo0ALkDAACncgAA-w97e2JtcD11c2VyZGF0
YSgiaTE2IiwxMzgsNTMsIjABAP--------------------------tTkxMDcEAA8gAA0PKAL-7g8g
ABQPKAL--9wfMQIAAA8YAAEOMAAPFAADDBwADwEAwQ4IAg8gAAMP-ADDHzEQAAoPFAAADyAAAg8B
AP-ODOQBFzECAA8YABEEHAAPAQD-zgzkAQ70AQ80AC81MTA0BAAPAQCxBFwGBAgADAwADwEAwQ-0
AQEIAgAPGAABDAEADhQACBwABCQCHzYsArYEFAIECAAMDAAPAQD-IgQcAg8oArkIGAIPvAodHzEC
AFAPAQCpTzEwMzABAO0CxgEfMgQAFB81BAAQHzIEAAQOMAIPKALFHzE8A7wCrgAfMgQADB81BAAk
HzIEAAIPAQChCCgCHzECABIfMgQAFA8CAD8MAQAfMQIAMh8yBAAAHzUEADQfMgQABA9QA2MPcAAE
D1gBIB8yBACMDAIAHzIEADgfNQQATB8yBAAEHzEoAlgfMhACFB8yBAD-BR81BABUHzIEAAQKAgAP
EAIvDwIABR4yEAAPBAD-Hx81BABUHzIEAA0PFAIwHzIEAGwfNQQAEB8yBAB8HzUEAIwfMigCLB8y
BAB8HzUEADAXMgQAHzUEAPQeMigCDzwEmgwEAB81BAD-RR8yKAIYHzIEAJAfNQQA-0EfMiQCFg8o
Av----8THzIkAhoPKAL-4B8yJAIiDygC-9gfMiQCKg8oAv-UHzIkAi4PKAIfFzcMAAwQAB83EAAE
CBQADwQAJR81BAD-JQRAAQ9QBF0I_AEMDAAbMgwADhQADwQAJx81BAD-DQQoAQ8YAjcPUAQzDwgA
AQgEAB4yEAAPBAAqHzUEAP8FHzIYAhIIDAAPKAInD4AVGR83EAAEHzcUAAUPBABAHzUEAMgfMgQA
Hg8BABgPKALcDwQAWRc1CAAPBABBHjIEAA8oAoQOLAIPBAB7D7gACx8yBABgFzUIAA8EACkfMiAC
lg4sAhUxiAAPJAKNDzgCLA-oAKoOAQAPLALhD4wnQg90Ah0PJAL-Bw8wAm8CAgAPAQCEDxQC7g8s
Ag8VMegADwQAPwYCAA8BAP_uGTECAB8yBAA0DxwCCg80Av_9BAIAHzIEABQGAgAPAQD-3h8xAgAY
DwEA---------------------8jxCyIpLGhpZGRlbj1mYWxzZSxwYW5feD0tNTU0CwDyAXk9LTE0
Mix0aWxlX2g9MTYKABB3CgCAem9vbT0yfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA5IDE5OjUyOjUzIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA5IDE4OjU5OjA1Iixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSIscmV2aXNpb249MTkwN11dbHo0ALYAAAAzCgAA-zBweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDQA8PkAQFBgdADJAICQoLQAyQDwwPDQ8ODEAM8P8BAOv-KaoB
EAYPIBABIAEgAfAAAhACDhABIA8hIAEwD0Dwww98D-8PHPDFD-gKD-8PgA-3Dw0B8AkBEAYOMgAG
XygP--DGMAD------58f-wEArM-ID0AADxBA--_w8HALAA0BMQAblRAADwEA-9tQ-----94=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI1LTA0LTA5IDE5OjUyOjUzIixtb2RpZmllZD0iMjAyNS0w
NC0yMSAxODoxMjozMSJdXQ==
:: chunk.lua
--[[pod_format="raw",created="2025-04-12 18:54:32",modified="2025-04-21 18:12:31",revision=2535]]
--[[
  [x] Chunk allocation
  [x] Chunk loading -> Loads from debug map
  [x] Chunk rendering
  [x] Store chunks to file system
  [x] Load chunks back from fs
]]

-- Sooooooo
-- We need to solve a few tasks
-- 1. Load chunks to memory
-- 2. Render them to screen
-- HOW 2 do? Either
--- Do all the everything manually <- tried this, 3x slower
--- OR
--- Leverage Picotron's native crap <- went with this!

include "constants.lua"
include "logging.lua"
include "generator.lua"

chunk = {}
LOADED_CHUNKS = {}
ALLOCATION_TABLE = {}
RENDER_CHUNK_HEAP = userdata("i16",16*200,16)
WORLD_NAME = "test_world"


local center_x = 0
local center_y = 0

function chunk.set_block_in_world(x,y,b)
	local c = chunk.get_chunk_by_world_pos(x,y)
	
	if (c) then
		local x_in_chunk = x%CHUNK_SIZE
		local y_in_chunk = y%CHUNK_SIZE
		c.tiles:set(x_in_chunk,y_in_chunk,b)
		local tile = b == 0 and 0 or b + 256
		RENDER_CHUNK_HEAP:set( c.tile_idx+x_in_chunk, y_in_chunk, tile )
		c.changed = true
	end
end

function chunk.get_tile_in_world(x,y)
	local x,y = flr(x), flr(y)
	local chunk_with_block = chunk.get_chunk_by_world_pos(x,y)
	if (not chunk_with_block) return nil
	return chunk_with_block.tiles:get(x%CHUNK_SIZE,y%CHUNK_SIZE)
end

function chunk.set_center(x,y)
	center_x = x
	center_y = y
end

function set_world_name(name)
	WORLD_NAME = name
	mkdir(SAVEGAME_DIRECTORY .. "/" .. WORLD_NAME)
end

function chunk.init()
	mkdir(SAVEGAME_DIRECTORY)
	mkdir(SAVEGAME_DIRECTORY .. "/" .. WORLD_NAME)
	memmap(RENDER_CHUNK_HEAP,0x100000)
end

function chunk.build_chunk()
	return {
		tiles = userdata(u8,CHUNK_SIZE,CHUNK_SIZE), -- picked arbitrarily, TODO optimize?
	}
end

--[[
 Allocate and add a new chunk to the world
 cx, cy: world position in whole chunks
 c: chunk instance
]]
function chunk.add_chunk(cx,cy,c)
	local chunk_id = cx .. "_" .. cy
	LOADED_CHUNKS[chunk_id] = c
	-- Find an unallocated chunk in heap by looking for a "false"
	local alloc_idx = indexof(ALLOCATION_TABLE, false)
	-- If we get a nil, that means we need a new slot
	if alloc_idx == nil then 
		alloc_idx = #ALLOCATION_TABLE+1 
	else
	
	end
	-- Mark the slot as allocated
	ALLOCATION_TABLE[alloc_idx] = true
	-- Finally, write to the heap...
	-- The heap is structured like a long-ass map, 8 in height and 1024 in length
	-- This can store 128 map layers
	-- TODO optimize this
	local write_offset = alloc_idx * CHUNK_SIZE
	local source_tiles = c.tiles
	for ix=0,CHUNK_SIZE-1 do
		for iy = 0,CHUNK_SIZE-1 do
			local tile = 256 + source_tiles:get(ix,iy)
			if (tile == 256) tile = 0
			if (tile == 258 and rnd(3)<1) then
				tile += flr(rnd(6)) * 8 + (flr(rnd(8)) << 13)
			end
			--RENDER_CHUNK_HEAP:set( write_offset+ix, iy, tile )
			mset( write_offset+ix, iy, tile )
		end
	end
	-- Precalculate some stuff...
	c.own_id = chunk_id
	c.alloc_idx = alloc_idx
	c.tile_idx = write_offset
	c.screen_x = cx * CHUNK_SIZE_IN_PIXELS
	c.screen_y = cy * CHUNK_SIZE_IN_PIXELS
	c.x = cx
	c.y = cy
end

function get_chunk_fname(cx, cy)
	return SAVEGAME_DIRECTORY .. "/" .. WORLD_NAME .. "/" .. cx .. "_" .. cy .. "-chunk.pod"
end

function chunk.free_chunk(c)
	ALLOCATION_TABLE[c.alloc_idx] = false
	LOADED_CHUNKS[c.own_id] = nil
	
	if c.changed then
		CHUNKS_TO_SAVE[#CHUNKS_TO_SAVE+1] = c
	end
end

function chunk.get_chunk_by_world_pos(x,y)
	return chunk.get_chunk(flr(x/CHUNK_SIZE),flr(y/CHUNK_SIZE))
end

function chunk.get_chunk(cx,cy)
	local chunk_id = cx .. "_" .. cy
	return LOADED_CHUNKS[chunk_id]
end

function chunk.render_loaded_chunks(base_x,base_y)
	if ( key("tab") and key("shift") ) map() return
	for i,c in pairs(LOADED_CHUNKS) do
		map(
			c.tile_idx,  --tile_x,       starting tiles
		   0,         	 --tile_y, 
			c.screen_x,  --[sx,          screen position
			c.screen_y,  --sy], 
			CHUNK_SIZE,  --[tiles_x,     how much to draw 
			CHUNK_SIZE,  --tiles_y], 
			0x00,        --[p8layers],   p8 layers...
			8,           --[tile_w,      tile size
			8            --tile_h]
		)
		if (key("tab")) then
			print("Chunk " .. i, c.screen_x, c.screen_y, 7) 
			print("Alloc " .. c.tile_idx)
		end
	end

end

function chunk.load_chunk(cx,cy)
	local filename = get_chunk_fname(cx, cy)
	local type, size, path = fstat(filename)
	if type then
		-- Load from disk...
		local new_chunk = chunk.build_chunk()
		local data = fetch(filename)
		new_chunk.tiles = data
		return new_chunk
	else
		-- Generate...
		yield()
		local new_chunk = do_world_generation(cx,cy)
		new_chunk.changed = true
		return new_chunk
	end
end

function chunk.start_loader_routine() 
	return cocreate(function() 
		while true do
			aggro_loader()
		end
	end)
end

function aggro_loader()
	local loader_area_start_x = flr(center_x/CHUNK_SIZE_IN_PIXELS) - 1
	local loader_area_start_y = flr(center_y/CHUNK_SIZE_IN_PIXELS) - 1
	local loader_area_end_x   = loader_area_start_x + 5
	local loader_area_end_y   = loader_area_start_y + 4
	for iy = loader_area_start_y, loader_area_end_y do
		yield()	
		for ix = loader_area_start_x, loader_area_end_x do

			local found_chunk = chunk.get_chunk(ix, iy)
			if found_chunk then
				found_chunk.touched = true
			else
				local new_chunk = chunk.load_chunk(ix, iy)
				chunk.add_chunk(ix, iy, new_chunk)	
				new_chunk.touched = true		
			end
		end
	end
	for i,c in pairs(LOADED_CHUNKS) do
		if c.touched then
			c.touched = false
		else
			chunk.free_chunk(c)
		end
	end
end

CHUNKS_TO_SAVE = {}

function chunk.start_saver_routine()
	return cocreate(function() 
		while true do
			aggro_saver()
			yield()
		end
	end)
end

function aggro_saver()
	local c = deli(CHUNKS_TO_SAVE)
	if c then
		local filename = get_chunk_fname(c.x,c.y)
		local data = c.tiles
		store(filename, data)
	end
	return c
end

function save_all()
	for i,c in pairs(LOADED_CHUNKS) do
		print("Will save chunk " .. i)
		CHUNKS_TO_SAVE[#CHUNKS_TO_SAVE+1] = c
	end
	local cc = 0
	while aggro_saver() do cls() print("Saved chunk " .. cc ) cc+=1 flip() end
end
--===========--
debug_map = fetch("map/debug.map")[1].bmp
function do_world_generation(cx,cy)
	local new_chunk = chunk.build_chunk()
	new_chunk.tiles = generate_terrain(cx,cy)
	return new_chunk
end
:: constants.lua
--[[pod_format="raw",created="2025-04-12 19:11:01",modified="2025-04-21 18:12:31",revision=1883]]

GAME_VERSION_STRING = "Indev 0w0"
TILE_SIZE = 8
CHUNK_SIZE = 16
CHUNK_SIZE_IN_PIXELS = TILE_SIZE * CHUNK_SIZE
SAVEGAME_DIRECTORY = "/appdata/picotron_stargazer"

GRAVITY = 0.1
MAX_FALL = 4



SCREEN_WIDTH=480
SCREEN_HEIGHT=270
SCREEN_5 = SCREEN_HEIGHT/5
SCREEN_10 = SCREEN_HEIGHT/10

WORLD_SEED=stat(86)

-- colors top to bottom
-- 0x07
-- 0x1c
-- 0x0c
-- 0x10
-- 0x01

SKY_COLORS = {
	[0]    = 0x0707,
	[SCREEN_10*1]  = 0x071c,
	[SCREEN_10*2]  = 0x1c1c,
	[SCREEN_10*3]  = 0x1c0c,
	[SCREEN_10*4]  = 0x0c0c,
	[SCREEN_10*5]  = 0x0c10,
	[SCREEN_10*6]  = 0x1010,
	[SCREEN_10*7]  = 0x1001,
	[SCREEN_10*8]  = 0x0101,
	[SCREEN_10*9] = 0x0100,
}

BOTTOM_RIGHT_PIXEL_X=479
BOTTOM_RIGHT_PIXEL_Y=269


:: entity.lua
--[[pod_format="raw",created="2025-04-14 16:32:59",modified="2025-04-21 18:12:31",revision=1228]]

include "constants.lua"
include "chunk.lua"



ENTITIES = {}
function update_entities()
	for e in all(ENTITIES) do
		e:update()
		move_entity(e)
	end
end

function draw_entities(camera_x, camera_y)
	for e in all(ENTITIES) do
		camera(camera_x-flr(e.x),camera_y-flr(e.y))
		e:draw()
	end
	camera(camera_x, camera_y)
end

function add_entity(e)
	ENTITIES[#ENTITIES+1] = e
end

function is_tile_solid(x,y)
	local tile_number = chunk.get_tile_in_world(x,y)
	return tile_number and tile_number > 0
end

function move_entity(e)
    -- Horizontal movement
    e.x += e.dx
    local tile_size = TILE_SIZE
    
    -- X collision check
    local x_side = e.dx > 0 and (e.x + e.width*tile_size) or e.x
    local tx = flr(x_side/tile_size)
    local ty_start = flr(e.y/tile_size)
    local ty_end = flr((e.y + e.height*tile_size - 1)/tile_size)
    
    for ty=ty_start,ty_end do
        if is_tile_solid(tx, ty) then
            e.x = e.dx > 0 and (tx*tile_size - e.width*tile_size) or (tx+1)*tile_size
            e.dx = 0
            break
        end
    end
    
    -- Vertical movement
    -- Apply gravity
    e.dy = mid(-MAX_FALL, e.dy + GRAVITY, MAX_FALL)
    e.y += e.dy
    e.grounded = false
    
    -- Y collision check
    local y_side = e.dy > 0 and (e.y + e.height*tile_size) or e.y
    local ty = flr(y_side/tile_size)
    local tx_start = flr(e.x/tile_size)
    local tx_end = flr((e.x + e.width*tile_size - 1)/tile_size)
    
    for tx=tx_start,tx_end do
        if is_tile_solid(tx, ty) then
            e.y = e.dy > 0 and (ty*tile_size - e.height*tile_size) or (ty+1)*tile_size
            if e.dy > 0 then e.grounded = true end
            e.dy = 0
            break
        end
    end
end
:: generator.lua
--[[pod_format="raw",created="2025-04-13 21:39:41",modified="2025-04-21 18:12:31",revision=434]]
include "noise.lua"
include "constants.lua"

function generate_terrain(cx,cy)
	local terrain_data = userdata("i16",CHUNK_SIZE,CHUNK_SIZE)
	for ix=0,CHUNK_SIZE-1 do
		local world_x = cx*CHUNK_SIZE+ix
		-- Generate height data for this position of the map
		-- Sea level is at 0
		local column_height = flr(simplex.Noise3D(world_x/64, 0xDEADBEEF, WORLD_SEED)*16)
		for iy = 0,CHUNK_SIZE-1 do
			local tile = 0
			local world_y = cy*CHUNK_SIZE+iy
			if world_y > column_height then
				 tile = 2
			end
			if world_y == column_height then
				tile = 1
			end
			terrain_data:set(ix,iy,tile) 
		end
	end
	return terrain_data
end

function noisetest()
	--local colors={8, 0,1,19,3,27,11,26,10,7,16}
	local colors = {7,7,7,0,7,7,7}
	function mapcol(t)
		t=max(0,min(1,t))
		local n=#colors
		return colors[flr(t*n)+1]
	end
	
	--n will be the "seed"
	n=0
	local nf = simplex.Noise3D
	function noise(x,y)
		return nf(x,y,n)
		+ 0.5*nf(2*x,2*y,n)
		+ 0.25*nf(4*x,4*y,n)
	end
	local lowest_excess = 1
	local highest_excess = 0

	while true do
		cls()

		print("HI/LO: " .. highest_excess .. "/" .. lowest_excess,0,0,7)
		print(stat(1),256,0,7)	
		for x=0,SCREEN_WIDTH do
			for y=10,SCREEN_HEIGHT do
				local t = (noise(x/50,y/50)+1)/2
				if t < lowest_excess then
					lowest_excess = t
				end
				if t > highest_excess then
					highest_excess = t
				end
				
				pset(x,y,mapcol(t))
			end
			flip()
		end

		n+=1
	end
end
:: logging.lua
--[[pod_format="raw",created="2025-04-12 21:25:08",modified="2025-04-14 21:24:47",revision=876]]
include "util.lua"

CURRENT_LOG = ""

function dbg(str)
	CURRENT_LOG ..= str .. "\n"
	CURRENT_LOG = sub(CURRENT_LOG,-1024)
end

function drawlog(x,y)
	local split_log = split(CURRENT_LOG,"\n")
	local c = 0;
	for i = max(1,#split_log-20),#split_log do
		prints(split_log[i],x,y+c*10)
		c += 1;
	end
end

function odbg(o,indent)
   if not indent then dbg('Dumping object...') end
	if type(o) == "userdata" then 
		local w,h,t = o:attribs()
		dbg(w .. "x" .. h .. " of " .. t)
		return 
	end
	if type(o) != "table" then dbg("Dumping undumpable " .. type(o) .. ": "  .. o) return end
	local indent = indent or ''
	for i,v in pairs(o) do
		if     (type(v) == 'table') then
			dbg(indent .. i .. " -> ")
			odbg(v, indent .. '  ')	
		elseif (type(v) == "function") then
			dbg("callable " .. i )
		elseif (type(v) == "userdata") then
			local w,h,t = v:attribs()
			dbg(indent .. i .. "	-> " .. w .. "x" .. h .. " of " .. t)
		else
			dbg(indent .. i .. ' = ' .. v )
		end
	end
	if indent == '' then
		dbg("Done dumping")
	end
end
:: main.lua
--[[pod_format="raw",created="2025-04-09 18:59:05",modified="2025-04-21 18:12:31",revision=2455]]
-- Picotron Stargazer
-- ~~ CREDITS ~~
-- Perlin noise implementation: github kitao -> pico8-libs -> perlin.lua

-- Todo
--[[
 [x] CHUNKS
  [x] Tracked in chunk.lua
 [x] Platformer physics and entities (Player character!)
 [ ] Light
 [ ] World interaction
 [ ] Inventory and item usage
 [ ] Interactive blocks
 [ ] Storage
 [ ] World generation I
 [ ] Gameplay goes here
 [ ] World generation II
 [ ] Final control scheme?
 [ ] Lore?
 [ ] Graphics?
 [ ] OST?
 [ ] Oleg?
]]

include "util.lua"
include "constants.lua"
include "chunk.lua"
include "logging.lua"
include "generator.lua"
include "entity.lua"
include "entities/player.lua"
include "world_interaction.lua"


local CAMERA_OFFSET_X = 0
local CAMERA_OFFSET_Y = 0
local CHUNK_X = 0
local CHUNK_Y = 0

function anitest(from,count,fskip)
	vid(3)
	local c = 0
	while true do
		cls()
		
		spr(from+c,64,64)
			print(flr(from+c),80,80)
		flip()
		local cc = 0
		while cc < fskip do cc+=1 flip() end
		c+=1
		c = c%count
	end
end

function aaa()
	anitest(2,6,5)
end


function _init()
	--vid(3)
	window { cursor = 'crosshair' }
	chunk.init()
	chunk_loader = chunk.start_loader_routine()
	chunk_saver  = chunk.start_saver_routine()
	add_entity(build_player())
end

FRAME_COUNTER = 0
function _draw()
	cls(12)
	--[[
	fillp(0b1010010110100101)

	for i=0,SCREEN_HEIGHT,SCREEN_10 do
		rectfill(0,i,SCREEN_WIDTH,i+SCREEN_5,SKY_COLORS[i])
	end
	fillp()
	]]
	camera(CAMERA_OFFSET_X,CAMERA_OFFSET_Y)
	chunk.render_loaded_chunks()
	draw_entities(CAMERA_OFFSET_X, CAMERA_OFFSET_Y)
	draw_world_mouse()
	camera()

	rect(0,0,BOTTOM_RIGHT_PIXEL_X,BOTTOM_RIGHT_PIXEL_Y,1)	
	local mem = stat(3)
	if (key('tab')) then 
		mem = stat(0)
		prints("Picotron version: "..  stat(5),1,10)
		prints("Loaded chunks: " .. real_count(LOADED_CHUNKS), 1, 20)
		drawlog(1, 30)
	end
	prints(
		"Picotron Stargazer ".. GAME_VERSION_STRING 
		.."! PERF: " .. stat(1) .. 
		" MEM: " .. mem/1024/1024 ..
		"\nCL " .. (LOADER_STATUS and "OK" or "DEAD :( ") ..
		"; CS " .. (SAVER_STATUS and "OK/" .. real_count(CHUNKS_TO_SAVE) or "DEAD :(") ..
		"; E: ".. real_count(ENTITIES)
		,1,1)
end

DEBUG_CAMERA_SPEED = 4

function _update()
	if	key("q") then
		save_all()
		stop("Goodbye <3")
	end
	update_world_mouse(CAMERA_OFFSET_X, CAMERA_OFFSET_Y)
	update_entities()

--	if (key("up")) CAMERA_OFFSET_Y -= DEBUG_CAMERA_SPEED
--	if (key("down")) CAMERA_OFFSET_Y += DEBUG_CAMERA_SPEED
--	if (key("left")) CAMERA_OFFSET_X -= DEBUG_CAMERA_SPEED
--	if (key("right")) CAMERA_OFFSET_X += DEBUG_CAMERA_SPEED
	CAMERA_OFFSET_X = ENTITIES[1].x-240---120
	CAMERA_OFFSET_Y = ENTITIES[1].y-135---67-
	chunk.set_center(CAMERA_OFFSET_X, CAMERA_OFFSET_Y)
	
	if not key("tab") then
		LOADER_STATUS, LOADER_OUTPUT = coresume(chunk_loader)
		--aggro_loader()
		
		--SAVER_STATUS = coresume(chunk_saver)
		--aggro_saver()
	end

end
:: noise.lua
b64$LS1bW3BvZF9mb3JtYXQ9InJhdyIsY3JlYXRlZD0iMjAyNS0wNC0wOSAxOTozNDoyMyIsbW9k
aWZpZWQ9IjIwMjUtMDQtMjEgMTg6MTI6MzEiLHJldmlzaW9uPTQ0Nl1dCi0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCi0tLVNpbXBsZXggTm9pc2UKLS0gT3Jp
Z2luYWwgSmF2YSBTb3VyY2U6IGh0dHA6Ly9zdGFmZnd3dy5pdG4ubGl1LnNlL35zdGVndS9zaW1w
bGV4bm9pc2Uvc2ltcGxleG5vaXNlLnBkZgotLSAobW9zdCkgT3JpZ2luYWwgY29tbWVudHMgaW5j
bHVkZWQKLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmxv
Y2FsIG1hdGggPSBtYXRoCmxvY2FsIHRhYmxlID0gdGFibGUKbG9jYWwgdG9udW1iZXIgPSB0b251
bWJlcgpsb2NhbCBpcGFpcnMgPSBpcGFpcnMKbG9jYWwgZXJyb3IgPSBlcnJvcgoKc2ltcGxleCA9
IHt9CgpzaW1wbGV4LkRJUl9YID0gMApzaW1wbGV4LkRJUl9ZID0gMQpzaW1wbGV4LkRJUl9aID0g
MgpzaW1wbGV4LkRJUl9XID0gMwpzaW1wbGV4LmludGVybmFsQ2FjaGUgPSBmYWxzZQoKbG9jYWwg
R3JhZGllbnRzM0QgPSB7ezEsMSwwfSx7LTEsMSwwfSx7MSwtMSwwfSx7LTEsLTEsMH0sCnsxLDAs
MX0sey0xLDAsMX0sezEsMCwtMX0sey0xLDAsLTF9LAp7MCwxLDF9LHswLC0xLDF9LHswLDEsLTF9
LHswLC0xLC0xfX07CmxvY2FsIEdyYWRpZW50czREID0ge3swLDEsMSwxfSwgezAsMSwxLC0xfSwg
ezAsMSwtMSwxfSwgezAsMSwtMSwtMX0sCnswLC0xLDEsMX0sIHswLC0xLDEsLTF9LCB7MCwtMSwt
MSwxfSwgezAsLTEsLTEsLTF9LAp7MSwwLDEsMX0sIHsxLDAsMSwtMX0sIHsxLDAsLTEsMX0sIHsx
LDAsLTEsLTF9LAp7LTEsMCwxLDF9LCB7LTEsMCwxLC0xfSwgey0xLDAsLTEsMX0sIHstMSwwLC0x
LC0xfSwKezEsMSwwLDF9LCB7MSwxLDAsLTF9LCB7MSwtMSwwLDF9LCB7MSwtMSwwLC0xfSwKey0x
LDEsMCwxfSwgey0xLDEsMCwtMX0sIHstMSwtMSwwLDF9LCB7LTEsLTEsMCwtMX0sCnsxLDEsMSww
fSwgezEsMSwtMSwwfSwgezEsLTEsMSwwfSwgezEsLTEsLTEsMH0sCnstMSwxLDEsMH0sIHstMSwx
LC0xLDB9LCB7LTEsLTEsMSwwfSwgey0xLC0xLC0xLDB9fTsKbG9jYWwgcCA9IHsxNTEsMTYwLDEz
Nyw5MSw5MCwxNSwKMTMxLDEzLDIwMSw5NSw5Niw1MywxOTQsMjMzLDcsMjI1LDE0MCwzNiwxMDMs
MzAsNjksMTQyLDgsOTksMzcsMjQwLDIxLDEwLDIzLAoxOTAsIDYsMTQ4LDI0NywxMjAsMjM0LDc1
LDAsMjYsMTk3LDYyLDk0LDI1MiwyMTksMjAzLDExNywzNSwxMSwzMiw1NywxNzcsMzMsCjg4LDIz
NywxNDksNTYsODcsMTc0LDIwLDEyNSwxMzYsMTcxLDE2OCwgNjgsMTc1LDc0LDE2NSw3MSwxMzQs
MTM5LDQ4LDI3LDE2NiwKNzcsMTQ2LDE1OCwyMzEsODMsMTExLDIyOSwxMjIsNjAsMjExLDEzMywy
MzAsMjIwLDEwNSw5Miw0MSw1NSw0NiwyNDUsNDAsMjQ0LAoxMDIsMTQzLDU0LCA2NSwyNSw2Mywx
NjEsIDEsMjE2LDgwLDczLDIwOSw3NiwxMzIsMTg3LDIwOCwgODksMTgsMTY5LDIwMCwxOTYsCjEz
NSwxMzAsMTE2LDE4OCwxNTksODYsMTY0LDEwMCwxMDksMTk4LDE3MywxODYsIDMsNjQsNTIsMjE3
LDIyNiwyNTAsMTI0LDEyMywKNSwyMDIsMzgsMTQ3LDExOCwxMjYsMjU1LDgyLDg1LDIxMiwyMDcs
MjA2LDU5LDIyNyw0NywxNiw1OCwxNywxODIsMTg5LDI4LDQyLAoyMjMsMTgzLDE3MCwyMTMsMTE5
LDI0OCwxNTIsIDIsNDQsMTU0LDE2MywgNzAsMjIxLDE1MywxMDEsMTU1LDE2NywgNDMsMTcyLDks
CjEyOSwyMiwzOSwyNTMsIDE5LDk4LDEwOCwxMTAsNzksMTEzLDIyNCwyMzIsMTc4LDE4NSwgMTEy
LDEwNCwyMTgsMjQ2LDk3LDIyOCwKMjUxLDM0LDI0MiwxOTMsMjM4LDIxMCwxNDQsMTIsMTkxLDE3
OSwxNjIsMjQxLCA4MSw1MSwxNDUsMjM1LDI0OSwxNCwyMzksMTA3LAo0OSwxOTIsMjE0LCAzMSwx
ODEsMTk5LDEwNiwxNTcsMTg0LCA4NCwyMDQsMTc2LDExNSwxMjEsNTAsNDUsMTI3LCA0LDE1MCwy
NTQsCjEzOCwyMzYsMjA1LDkzLDIyMiwxMTQsNjcsMjksMjQsNzIsMjQzLDE0MSwxMjgsMTk1LDc4
LDY2LDIxNSw2MSwxNTYsMTgwfTsKCi0tIFRvIHJlbW92ZSB0aGUgbmVlZCBmb3IgaW5kZXggd3Jh
cHBpbmcsIGRvdWJsZSB0aGUgcGVybXV0YXRpb24gdGFibGUgbGVuZ3RoCgpmb3IgaT0xLCNwIGRv
CglwW2ktMV0gPSBwW2ldCglwW2ldID0gbmlsCmVuZAoKZm9yIGk9MSwjR3JhZGllbnRzM0QgZG8K
CUdyYWRpZW50czNEW2ktMV0gPSBHcmFkaWVudHMzRFtpXQoJR3JhZGllbnRzM0RbaV0gPSBuaWwK
ZW5kCgpmb3IgaT0xLCNHcmFkaWVudHM0RCBkbwoJR3JhZGllbnRzNERbaS0xXSA9IEdyYWRpZW50
czREW2ldCglHcmFkaWVudHM0RFtpXSA9IG5pbAplbmQKCmxvY2FsIHBlcm0gPSB7fQoKZm9yIGk9
MCwyNTUgZG8KCXBlcm1baV0gPSBwW2ldCglwZXJtW2krMjU2XSA9IHBbaV0KZW5kCgotLSBBIGxv
b2t1cCB0YWJsZSB0byB0cmF2ZXJzZSB0aGUgc2ltIGFyb3VuZCBhIGdpdmVuIHBvaW50IGluIDRE
LgotLSBEZXRhaWxzIGNhbiBiZSBmb3VuZCB3aGVyZSB0aGlzIHRhYmxlIGlzIHVzZWQsIGluIHRo
ZSA0RCBub2lzZSBtZXRob2QuCgpsb2NhbCBzaW0gPSB7CnswLDEsMiwzfSx7MCwxLDMsMn0sezAs
MCwwLDB9LHswLDIsMywxfSx7MCwwLDAsMH0sezAsMCwwLDB9LHswLDAsMCwwfSx7MSwyLDMsMH0s
CnswLDIsMSwzfSx7MCwwLDAsMH0sezAsMywxLDJ9LHswLDMsMiwxfSx7MCwwLDAsMH0sezAsMCww
LDB9LHswLDAsMCwwfSx7MSwzLDIsMH0sCnswLDAsMCwwfSx7MCwwLDAsMH0sezAsMCwwLDB9LHsw
LDAsMCwwfSx7MCwwLDAsMH0sezAsMCwwLDB9LHswLDAsMCwwfSx7MCwwLDAsMH0sCnsxLDIsMCwz
fSx7MCwwLDAsMH0sezEsMywwLDJ9LHswLDAsMCwwfSx7MCwwLDAsMH0sezAsMCwwLDB9LHsyLDMs
MCwxfSx7MiwzLDEsMH0sCnsxLDAsMiwzfSx7MSwwLDMsMn0sezAsMCwwLDB9LHswLDAsMCwwfSx7
MCwwLDAsMH0sezIsMCwzLDF9LHswLDAsMCwwfSx7MiwxLDMsMH0sCnswLDAsMCwwfSx7MCwwLDAs
MH0sezAsMCwwLDB9LHswLDAsMCwwfSx7MCwwLDAsMH0sezAsMCwwLDB9LHswLDAsMCwwfSx7MCww
LDAsMH0sCnsyLDAsMSwzfSx7MCwwLDAsMH0sezAsMCwwLDB9LHswLDAsMCwwfSx7MywwLDEsMn0s
ezMsMCwyLDF9LHswLDAsMCwwfSx7MywxLDIsMH0sCnsyLDEsMCwzfSx7MCwwLDAsMH0sezAsMCww
LDB9LHswLDAsMCwwfSx7MywxLDAsMn0sezAsMCwwLDB9LHszLDIsMCwxfSx7MywyLDEsMH19OwoK
bG9jYWwgZnVuY3Rpb24gRG90MkQodGJsLCB4LCB5KQoJcmV0dXJuIHRibFsxXSp4ICsgdGJsWzJd
Knk7IAplbmQKCmxvY2FsIGZ1bmN0aW9uIERvdDNEKHRibCwgeCwgeSwgeikKCXJldHVybiB0Ymxb
MV0qeCArIHRibFsyXSp5ICsgdGJsWzNdKnoKZW5kCgpsb2NhbCBmdW5jdGlvbiBEb3Q0RCggdGJs
LCB4LHkseix3KSAKCXJldHVybiB0YmxbMV0qeCArIHRibFsyXSp5ICsgdGJsWzNdKnogKyB0Ymxb
M10qdzsKZW5kCgpsb2NhbCBQcmV2MkQgPSB7fQoKLS0gMkQgc2ltcGxleCBub2lzZQoKZnVuY3Rp
b24gc2ltcGxleC5Ob2lzZTJEKHhpbiwgeWluKQoJaWYgc2ltcGxleC5pbnRlcm5hbENhY2hlIGFu
ZCBQcmV2MkRbeGluXSBhbmQgUHJldjJEW3hpbl1beWluXSB0aGVuIHJldHVybiBQcmV2MkRbeGlu
XVt5aW5dIGVuZCAKCglsb2NhbCBuMCwgbjEsIG4yOyAtLSBOb2lzZSBjb250cmlidXRpb25zIGZy
b20gdGhlIHRocmVlIGNvcm5lcnMKCS0tIFNrZXcgdGhlIGlucHV0IHNwYWNlIHRvIGRldGVybWlu
ZSB3aGljaCBzaW1wbGV4IGNlbGwgd2UncmUgaW4KCWxvY2FsIEYyID0gMC41KihtYXRoLnNxcnQo
My4wKS0xLjApOwoJbG9jYWwgcyA9ICh4aW4reWluKSpGMjsgLS0gSGFpcnkgZmFjdG9yIGZvciAy
RAoJbG9jYWwgaSA9IG1hdGguZmxvb3IoeGluK3MpOwoJbG9jYWwgaiA9IG1hdGguZmxvb3IoeWlu
K3MpOwoJbG9jYWwgRzIgPSAoMy4wLW1hdGguc3FydCgzLjApKS82LjA7CgoJbG9jYWwgdCA9IChp
K2opKkcyOwoJbG9jYWwgWDAgPSBpLXQ7IC0tIFVuc2tldyB0aGUgY2VsbCBvcmlnaW4gYmFjayB0
byAoeCx5KSBzcGFjZQoJbG9jYWwgWTAgPSBqLXQ7Cglsb2NhbCB4MCA9IHhpbi1YMDsgLS0gVGhl
IHgseSBkaXN0YW5jZXMgZnJvbSB0aGUgY2VsbCBvcmlnaW4KCWxvY2FsIHkwID0geWluLVkwOwoK
CS0tIEZvciB0aGUgMkQgY2FzZSwgdGhlIHNpbXBsZXggc2hhcGUgaXMgYW4gZXF1aWxhdGVyYWwg
dHJpYW5nbGUuCgktLSBEZXRlcm1pbmUgd2hpY2ggc2ltcGxleCB3ZSBhcmUgaW4uCglsb2NhbCBp
MSwgajE7IC0tIE9mZnNldHMgZm9yIHNlY29uZCAobWlkZGxlKSBjb3JuZXIgb2Ygc2ltcGxleCBp
biAoaSxqKSBjb29yZHMKCWlmKHgwPnkwKSB0aGVuIAoJCWkxPTEgCgkJajE9MCAgLS0gbG93ZXIg
dHJpYW5nbGUsIFhZIG9yZGVyOiAoMCwwKS0_KDEsMCktPigxLDEpCgllbHNlCgkJaTE9MAoJCWox
PTEgLS0gdXBwZXIgdHJpYW5nbGUsIFlYIG9yZGVyOiAoMCwwKS0_KDAsMSktPigxLDEpCgllbmQK
CgktLSBBIHN0ZXAgb2YgKDEsMCkgaW4gKGksaikgbWVhbnMgYSBzdGVwIG9mICgxLWMsLWMpIGlu
ICh4LHkpLCBhbmQKCS0tIGEgc3RlcCBvZiAoMCwxKSBpbiAoaSxqKSBtZWFucyBhIHN0ZXAgb2Yg
KC1jLDEtYykgaW4gKHgseSksIHdoZXJlCgktLSBjID0gKDMtc3FydCgzKSkvNgoKCWxvY2FsIHgx
ID0geDAgLSBpMSArIEcyOyAtLSBPZmZzZXRzIGZvciBtaWRkbGUgY29ybmVyIGluICh4LHkpIHVu
c2tld2VkIGNvb3JkcwoJbG9jYWwgeTEgPSB5MCAtIGoxICsgRzI7Cglsb2NhbCB4MiA9IHgwIC0g
MS4wICsgMi4wICogRzI7IC0tIE9mZnNldHMgZm9yIGxhc3QgY29ybmVyIGluICh4LHkpIHVuc2tl
d2VkIGNvb3JkcwoJbG9jYWwgeTIgPSB5MCAtIDEuMCArIDIuMCAqIEcyOwoKCS0tIFdvcmsgb3V0
IHRoZSBoYXNoZWQgZ3JhZGllbnQgaW5kaWNlcyBvZiB0aGUgdGhyZWUgc2ltcGxleCBjb3JuZXJz
Cglsb2NhbCBpaSA9IGkmMjU1Cglsb2NhbCBqaiA9IGomMjU1Cglsb2NhbCBnaTAgPSBwZXJtW2lp
K3Blcm1bampdXSAlIDEyOwoJbG9jYWwgZ2kxID0gcGVybVtpaStpMStwZXJtW2pqK2oxXV0gJSAx
MjsKCWxvY2FsIGdpMiA9IHBlcm1baWkrMStwZXJtW2pqKzFdXSAlIDEyOwoKCS0tIENhbGN1bGF0
ZSB0aGUgY29udHJpYnV0aW9uIGZyb20gdGhlIHRocmVlIGNvcm5lcnMKCWxvY2FsIHQwID0gMC41
IC0geDAqeDAteTAqeTA7CglpZiB0MDwwIHRoZW4gCgkJbjAgPSAwLjA7CgllbHNlCgkJdDAgPSB0
MCAqIHQwCgkJbjAgPSB0MCAqIHQwICogRG90MkQoR3JhZGllbnRzM0RbZ2kwXSwgeDAsIHkwKTsg
LS0gKHgseSkgb2YgR3JhZGllbnRzM0QgdXNlZCBmb3IgMkQgZ3JhZGllbnQKCWVuZAoKCWxvY2Fs
IHQxID0gMC41IC0geDEqeDEteTEqeTE7CglpZiAodDE8MCkgdGhlbgoJCW4xID0gMC4wOwoJZWxz
ZQoJCXQxID0gdDEqdDEKCQluMSA9IHQxICogdDEgKiBEb3QyRChHcmFkaWVudHMzRFtnaTFdLCB4
MSwgeTEpOwoJZW5kCgoJbG9jYWwgdDIgPSAwLjUgLSB4Mip4Mi15Mip5MjsKCWlmICh0MjwwKSB0
aGVuCgkJbjIgPSAwLjA7CgllbHNlCgkJdDIgPSB0Mip0MgoJCW4yID0gdDIgKiB0MiAqIERvdDJE
KEdyYWRpZW50czNEW2dpMl0sIHgyLCB5Mik7CgllbmQKCgktLSBBZGQgY29udHJpYnV0aW9ucyBm
cm9tIGVhY2ggY29ybmVyIHRvIGdldCB0aGUgZmluYWwgbm9pc2UgdmFsdWUuCgktLSBUaGUgcmVz
dWx0IGlzIHNjYWxlZCB0byByZXR1cm4gdmFsdWVzIGluIHRoZSBsb2NhbGVydmFsIFstMSwxXS4K
Cglsb2NhbCByZXR2YWwgPSA3MC4wICogKG4wICsgbjEgKyBuMikKCglpZiBzaW1wbGV4LmludGVy
bmFsQ2FjaGUgdGhlbgoJCWlmIG5vdCBQcmV2MkRbeGluXSB0aGVuIFByZXYyRFt4aW5dID0ge30g
ZW5kCgkJUHJldjJEW3hpbl1beWluXSA9IHJldHZhbAoJZW5kCgoJcmV0dXJuIHJldHZhbDsKZW5k
Cgpsb2NhbCBQcmV2M0QgPSB7fQoKLS0gM0Qgc2ltcGxleCBub2lzZQpmdW5jdGlvbiBzaW1wbGV4
Lk5vaXNlM0QoeGluLCB5aW4sIHppbikKCglpZiBzaW1wbGV4LmludGVybmFsQ2FjaGUgYW5kIFBy
ZXYzRFt4aW5dIGFuZCBQcmV2M0RbeGluXVt5aW5dIGFuZCBQcmV2M0RbeGluXVt5aW5dW3ppbl0g
dGhlbiByZXR1cm4gUHJldjNEW3hpbl1beWluXVt6aW5dIGVuZAoKCWxvY2FsIG4wLCBuMSwgbjIs
IG4zOyAtLSBOb2lzZSBjb250cmlidXRpb25zIGZyb20gdGhlIGZvdXIgY29ybmVycwoKCS0tIFNr
ZXcgdGhlIGlucHV0IHNwYWNlIHRvIGRldGVybWluZSB3aGljaCBzaW1wbGV4IGNlbGwgd2UncmUg
aW4KCWxvY2FsIEYzID0gMS4wLzMuMDsKCWxvY2FsIHMgPSAoeGluK3lpbit6aW4pKkYzOyAtLSBW
ZXJ5IG5pY2UgYW5kIHNpbXBsZSBza2V3IGZhY3RvciBmb3IgM0QKCWxvY2FsIGkgPSBtYXRoLmZs
b29yKHhpbitzKTsKCWxvY2FsIGogPSBtYXRoLmZsb29yKHlpbitzKTsKCWxvY2FsIGsgPSBtYXRo
LmZsb29yKHppbitzKTsKCglsb2NhbCBHMyA9IDEuMC82LjA7IC0tIFZlcnkgbmljZSBhbmQgc2lt
cGxlIHVuc2tldyBmYWN0b3IsIHRvbwoJbG9jYWwgdCA9IChpK2oraykqRzM7CgoJbG9jYWwgWDAg
PSBpLXQ7IC0tIFVuc2tldyB0aGUgY2VsbCBvcmlnaW4gYmFjayB0byAoeCx5LHopIHNwYWNlCgls
b2NhbCBZMCA9IGotdDsKCWxvY2FsIFowID0gay10OwoKCWxvY2FsIHgwID0geGluLVgwOyAtLSBU
aGUgeCx5LHogZGlzdGFuY2VzIGZyb20gdGhlIGNlbGwgb3JpZ2luCglsb2NhbCB5MCA9IHlpbi1Z
MDsKCWxvY2FsIHowID0gemluLVowOwoKCS0tIEZvciB0aGUgM0QgY2FzZSwgdGhlIHNpbXBsZXgg
c2hhcGUgaXMgYSBzbGlnaHRseSBpcnJlZ3VsYXIgdGV0cmFoZWRyb24uCgktLSBEZXRlcm1pbmUg
d2hpY2ggc2ltcGxleCB3ZSBhcmUgaW4uCglsb2NhbCBpMSwgajEsIGsxOyAtLSBPZmZzZXRzIGZv
ciBzZWNvbmQgY29ybmVyIG9mIHNpbXBsZXggaW4gKGksaixrKSBjb29yZHMKCWxvY2FsIGkyLCBq
MiwgazI7IC0tIE9mZnNldHMgZm9yIHRoaXJkIGNvcm5lciBvZiBzaW1wbGV4IGluIChpLGosaykg
Y29vcmRzCgoJaWYgKHgwPj15MCkgdGhlbgoJCWlmICh5MD49ejApIHRoZW4KCQkJaTE9MTsgajE9
MDsgazE9MDsgaTI9MTsgajI9MTsgazI9MDsgLS0gWCBZIFogb3JkZXIKCQllbHNlaWYgKHgwPj16
MCkgdGhlbgoJCQlpMT0xOyBqMT0wOyBrMT0wOyBpMj0xOyBqMj0wOyBrMj0xOyAtLSBYIFogWSBv
cmRlcgoJCWVsc2UgCgkJCWkxPTA7IGoxPTA7IGsxPTE7IGkyPTE7IGoyPTA7IGsyPTE7ICAtLSBa
IFggWSBvcmRlcgoJCWVuZAoJZWxzZSAtLSB4MDx5MAoJCWlmICh5MDx6MCkgdGhlbiAKCQkJaTE9
MDsgajE9MDsgazE9MTsgaTI9MDsgajI9MTsgazI9MTsgLS0gWiBZIFggb3JkZXIKCQllbHNlaWYg
KHgwPHowKSB0aGVuIAoJCQlpMT0wOyBqMT0xOyBrMT0wOyBpMj0wOyBqMj0xOyBrMj0xOyAtLSBZ
IFogWCBvcmRlcgoJCWVsc2UgCgkJCWkxPTA7IGoxPTE7IGsxPTA7IGkyPTE7IGoyPTE7IGsyPTA7
IC0tIFkgWCBaIG9yZGVyCgkJZW5kCgllbmQKCgktLSBBIHN0ZXAgb2YgKDEsMCwwKSBpbiAoaSxq
LGspIG1lYW5zIGEgc3RlcCBvZiAoMS1jLC1jLC1jKSBpbiAoeCx5LHopLAoJLS0gYSBzdGVwIG9m
ICgwLDEsMCkgaW4gKGksaixrKSBtZWFucyBhIHN0ZXAgb2YgKC1jLDEtYywtYykgaW4gKHgseSx6
KSwgYW5kCgktLSBhIHN0ZXAgb2YgKDAsMCwxKSBpbiAoaSxqLGspIG1lYW5zIGEgc3RlcCBvZiAo
LWMsLWMsMS1jKSBpbiAoeCx5LHopLCB3aGVyZQoJLS0gYyA9IDEvNi4KCglsb2NhbCB4MSA9IHgw
IC0gaTEgKyBHMzsgLS0gT2Zmc2V0cyBmb3Igc2Vjb25kIGNvcm5lciBpbiAoeCx5LHopIGNvb3Jk
cwoJbG9jYWwgeTEgPSB5MCAtIGoxICsgRzM7Cglsb2NhbCB6MSA9IHowIC0gazEgKyBHMzsKCgls
b2NhbCB4MiA9IHgwIC0gaTIgKyAyLjAqRzM7IC0tIE9mZnNldHMgZm9yIHRoaXJkIGNvcm5lciBp
biAoeCx5LHopIGNvb3JkcwoJbG9jYWwgeTIgPSB5MCAtIGoyICsgMi4wKkczOwoJbG9jYWwgejIg
PSB6MCAtIGsyICsgMi4wKkczOwoKCWxvY2FsIHgzID0geDAgLSAxLjAgKyAzLjAqRzM7IC0tIE9m
ZnNldHMgZm9yIGxhc3QgY29ybmVyIGluICh4LHkseikgY29vcmRzCglsb2NhbCB5MyA9IHkwIC0g
MS4wICsgMy4wKkczOwoJbG9jYWwgejMgPSB6MCAtIDEuMCArIDMuMCpHMzsKCgktLSBXb3JrIG91
dCB0aGUgaGFzaGVkIGdyYWRpZW50IGluZGljZXMgb2YgdGhlIGZvdXIgc2ltcGxleCBjb3JuZXJz
Cglsb2NhbCBpaSA9IGkmMjU1Cglsb2NhbCBqaiA9IGomMjU1Cglsb2NhbCBrayA9IGsmMjU1CgoJ
bG9jYWwgZ2kwID0gcGVybVtpaStwZXJtW2pqK3Blcm1ba2tdXV0gJSAxMjsKCWxvY2FsIGdpMSA9
IHBlcm1baWkraTErcGVybVtqaitqMStwZXJtW2trK2sxXV1dICUgMTI7Cglsb2NhbCBnaTIgPSBw
ZXJtW2lpK2kyK3Blcm1bamorajIrcGVybVtraytrMl1dXSAlIDEyOwoJbG9jYWwgZ2kzID0gcGVy
bVtpaSsxK3Blcm1bamorMStwZXJtW2trKzFdXV0gJSAxMjsKCgktLSBDYWxjdWxhdGUgdGhlIGNv
bnRyaWJ1dGlvbiBmcm9tIHRoZSBmb3VyIGNvcm5lcnMKCWxvY2FsIHQwID0gMC41IC0geDAqeDAg
LSB5MCp5MCAtIHowKnowOwoKCWlmICh0MDwwKSB0aGVuCgkJbjAgPSAwLjA7CgllbHNlIAoJCXQw
ID0gdDAqdDA7CgkJbjAgPSB0MCAqIHQwICogRG90M0QoR3JhZGllbnRzM0RbZ2kwXSwgeDAsIHkw
LCB6MCk7CgllbmQKCglsb2NhbCB0MSA9IDAuNSAtIHgxKngxIC0geTEqeTEgLSB6MSp6MTsKCglp
ZiAodDE8MCkgdGhlbiAKCQluMSA9IDAuMDsKCWVsc2UKCQl0MSA9IHQxKnQxOwoJCW4xID0gdDEg
KiB0MSAqIERvdDNEKEdyYWRpZW50czNEW2dpMV0sIHgxLCB5MSwgejEpOwoJZW5kCgoJbG9jYWwg
dDIgPSAwLjUgLSB4Mip4MiAtIHkyKnkyIC0gejIqejI7CgoJaWYgKHQyPDApIHRoZW4gCgkJbjIg
PSAwLjA7CgllbHNlCgkJdDIgPSB0Mip0MjsKCQluMiA9IHQyICogdDIgKiBEb3QzRChHcmFkaWVu
dHMzRFtnaTJdLCB4MiwgeTIsIHoyKTsKCWVuZAoKCWxvY2FsIHQzID0gMC41IC0geDMqeDMgLSB5
Myp5MyAtIHozKnozOwoKCWlmICh0MzwwKSB0aGVuIAoJCW4zID0gMC4wOwoJZWxzZQoJCXQzID0g
dDMqdDM7CgkJbjMgPSB0MyAqIHQzICogRG90M0QoR3JhZGllbnRzM0RbZ2kzXSwgeDMsIHkzLCB6
Myk7CgllbmQKCgktLSBBZGQgY29udHJpYnV0aW9ucyBmcm9tIGVhY2ggY29ybmVyIHRvIGdldCB0
aGUgZmluYWwgbm9pc2UgdmFsdWUuCgktLSBUaGUgcmVzdWx0IGlzIHNjYWxlZCB0byBzdGF5IGp1
c3QgaW5zaWRlIFstMSwxXQoJbG9jYWwgcmV0dmFsID0gNDYgKiAobjAgKyBuMSArIG4yICsgbjMp
CgoJaWYgc2ltcGxleC5pbnRlcm5hbENhY2hlIHRoZW4KCQlpZiBub3QgUHJldjNEW3hpbl0gdGhl
biBQcmV2M0RbeGluXSA9IHt9IGVuZAoJCWlmIG5vdCBQcmV2M0RbeGluXVt5aW5dIHRoZW4gUHJl
djNEW3hpbl1beWluXSA9IHt9IGVuZAoJCVByZXYzRFt4aW5dW3lpbl1bemluXSA9IHJldHZhbAoJ
ZW5kCgoJcmV0dXJuIHJldHZhbDsKZW5kCgpsb2NhbCBQcmV2NEQgPSB7fQoKLS0gNEQgc2ltcGxl
eCBub2lzZQpmdW5jdGlvbiBzaW1wbGV4Lk5vaXNlNEQoeCx5LHosdykKCglpZiBzaW1wbGV4Lmlu
dGVybmFsQ2FjaGUgYW5kIFByZXY0RFt4XSBhbmQgUHJldjREW3hdW3ldIGFuZCBQcmV2NERbeF1b
eV1bel0gYW5kIFByZXY0RFt4XVt5XVt6XVt3XSB0aGVuIHJldHVybiBQcmV2NERbeF1beV1bel1b
d10gZW5kCgoJLS0gVGhlIHNrZXdpbmcgYW5kIHVuc2tld2luZyBmYWN0b3JzIGFyZSBoYWlyeSBh
Z2FpbiBmb3IgdGhlIDREIGNhc2UKCWxvY2FsIEY0ID0gKG1hdGguc3FydCg1LjApLTEuMCkvNC4w
OwoJbG9jYWwgRzQgPSAoNS4wLW1hdGguc3FydCg1LjApKS8yMC4wOwoJbG9jYWwgbjAsIG4xLCBu
MiwgbjMsIG40OyAtLSBOb2lzZSBjb250cmlidXRpb25zIGZyb20gdGhlIGZpdmUgY29ybmVycwoJ
LS0gU2tldyB0aGUgKHgseSx6LHcpIHNwYWNlIHRvIGRldGVybWluZSB3aGljaCBjZWxsIG9mIDI0
IHNpbXBsaWNlcyB3ZSdyZSBpbgoJbG9jYWwgcyA9ICh4ICsgeSArIHogKyB3KSAqIEY0OyAtLSBG
YWN0b3IgZm9yIDREIHNrZXdpbmcKCWxvY2FsIGkgPSBtYXRoLmZsb29yKHggKyBzKTsKCWxvY2Fs
IGogPSBtYXRoLmZsb29yKHkgKyBzKTsKCWxvY2FsIGsgPSBtYXRoLmZsb29yKHogKyBzKTsKCWxv
Y2FsIGwgPSBtYXRoLmZsb29yKHcgKyBzKTsKCWxvY2FsIHQgPSAoaSArIGogKyBrICsgbCkgKiBH
NDsgLS0gRmFjdG9yIGZvciA0RCB1bnNrZXdpbmcKCWxvY2FsIFgwID0gaSAtIHQ7IC0tIFVuc2tl
dyB0aGUgY2VsbCBvcmlnaW4gYmFjayB0byAoeCx5LHosdykgc3BhY2UKCWxvY2FsIFkwID0gaiAt
IHQ7Cglsb2NhbCBaMCA9IGsgLSB0OwoJbG9jYWwgVzAgPSBsIC0gdDsKCWxvY2FsIHgwID0geCAt
IFgwOyAtLSBUaGUgeCx5LHosdyBkaXN0YW5jZXMgZnJvbSB0aGUgY2VsbCBvcmlnaW4KCWxvY2Fs
IHkwID0geSAtIFkwOwoJbG9jYWwgejAgPSB6IC0gWjA7Cglsb2NhbCB3MCA9IHcgLSBXMDsKCS0t
IEZvciB0aGUgNEQgY2FzZSwgdGhlIHNpbXBsZXggaXMgYSA0RCBzaGFwZSBJIHdvbid0IGV2ZW4g
dHJ5IHRvIGRlc2NyaWJlLgoJLS0gVG8gZmluZCBvdXQgd2hpY2ggb2YgdGhlIDI0IHBvc3NpYmxl
IHNpbXBsaWNlcyB3ZSdyZSBpbiwgd2UgbmVlZCB0bwoJLS0gZGV0ZXJtaW5lIHRoZSBtYWduaXR1
ZGUgb3JkZXJpbmcgb2YgeDAsIHkwLCB6MCBhbmQgdzAuCgktLSBUaGUgbWV0aG9kIGJlbG93IGlz
IGEgZ29vZCB3YXkgb2YgZmluZGluZyB0aGUgb3JkZXJpbmcgb2YgeCx5LHosdyBhbmQKCS0tIHRo
ZW4gZmluZCB0aGUgY29ycmVjdCB0cmF2ZXJzYWwgb3JkZXIgZm9yIHRoZSBzaW1wbGV4IHdl77_9
cmUgaW4uCgktLSBGaXJzdCwgc2l4IHBhaXItd2lzZSBjb21wYXJpc29ucyBhcmUgcGVyZm9ybWVk
IGJldHdlZW4gZWFjaCBwb3NzaWJsZSBwYWlyCgktLSBvZiB0aGUgZm91ciBjb29yZGluYXRlcywg
YW5kIHRoZSByZXN1bHRzIGFyZSB1c2VkIHRvIGFkZCB1cCBiaW5hcnkgYml0cwoJLS0gZm9yIGFu
IGxvY2FsZWdlciBpbmRleC4KCWxvY2FsIGMxID0gKHgwID4geTApIGFuZCAzMiBvciAxOwoJbG9j
YWwgYzIgPSAoeDAgPiB6MCkgYW5kIDE2IG9yIDE7Cglsb2NhbCBjMyA9ICh5MCA_IHowKSBhbmQg
OCBvciAxOwoJbG9jYWwgYzQgPSAoeDAgPiB3MCkgYW5kIDQgb3IgMTsKCWxvY2FsIGM1ID0gKHkw
ID4gdzApIGFuZCAyIG9yIDE7Cglsb2NhbCBjNiA9ICh6MCA_IHcwKSBhbmQgMSBvciAxOwoJbG9j
YWwgYyA9IGMxICsgYzIgKyBjMyArIGM0ICsgYzUgKyBjNjsKCWxvY2FsIGkxLCBqMSwgazEsIGwx
OyAtLSBUaGUgbG9jYWxlZ2VyIG9mZnNldHMgZm9yIHRoZSBzZWNvbmQgc2ltcGxleCBjb3JuZXIK
CWxvY2FsIGkyLCBqMiwgazIsIGwyOyAtLSBUaGUgbG9jYWxlZ2VyIG9mZnNldHMgZm9yIHRoZSB0
aGlyZCBzaW1wbGV4IGNvcm5lcgoJbG9jYWwgaTMsIGozLCBrMywgbDM7IC0tIFRoZSBsb2NhbGVn
ZXIgb2Zmc2V0cyBmb3IgdGhlIGZvdXJ0aCBzaW1wbGV4IGNvcm5lcgoKCS0tIHNpbVtjXSBpcyBh
IDQtdmVjdG9yIHdpdGggdGhlIG51bWJlcnMgMCwgMSwgMiBhbmQgMyBpbiBzb21lIG9yZGVyLgoJ
LS0gTWFueSB2YWx1ZXMgb2YgYyB3aWxsIG5ldmVyIG9jY3VyLCBzaW5jZSBlLmcuIHg_eT56Pncg
bWFrZXMgeDx6LCB5PHcgYW5kIHg8dwoJLS0gaW1wb3NzaWJsZS4gT25seSB0aGUgMjQgaW5kaWNl
cyB3aGljaCBoYXZlIG5vbi16ZXJvIGVudHJpZXMgbWFrZSBhbnkgc2Vuc2UuCgktLSBXZSB1c2Ug
YSB0aHJlc2hvbGRpbmcgdG8gc2V0IHRoZSBjb29yZGluYXRlcyBpbiB0dXJuIGZyb20gdGhlIGxh
cmdlc3QgbWFnbml0dWRlLgoJLS0gVGhlIG51bWJlciAzIGluIHRoZSAic2ltIiBhcnJheSBpcyBh
dCB0aGUgcG9zaXRpb24gb2YgdGhlIGxhcmdlc3QgY29vcmRpbmF0ZS4KCglpMSA9IHNpbVtjXVsx
XT49MyBhbmQgMSBvciAwOwoJajEgPSBzaW1bY11bMl0_PTMgYW5kIDEgb3IgMDsKCWsxID0gc2lt
W2NdWzNdPj0zIGFuZCAxIG9yIDA7CglsMSA9IHNpbVtjXVs0XT49MyBhbmQgMSBvciAwOwoJLS0g
VGhlIG51bWJlciAyIGluIHRoZSAic2ltIiBhcnJheSBpcyBhdCB0aGUgc2Vjb25kIGxhcmdlc3Qg
Y29vcmRpbmF0ZS4KCWkyID0gc2ltW2NdWzFdPj0yIGFuZCAxIG9yIDA7CglqMiA9IHNpbVtjXVsy
XT49MiBhbmQgMSBvciAwOwoJazIgPSBzaW1bY11bM10_PTIgYW5kIDEgb3IgMDsKCWwyID0gc2lt
W2NdWzRdPj0yIGFuZCAxIG9yIDA7CgktLSBUaGUgbnVtYmVyIDEgaW4gdGhlICJzaW0iIGFycmF5
IGlzIGF0IHRoZSBzZWNvbmQgc21hbGxlc3QgY29vcmRpbmF0ZS4KCWkzID0gc2ltW2NdWzFdPj0x
IGFuZCAxIG9yIDA7CglqMyA9IHNpbVtjXVsyXT49MSBhbmQgMSBvciAwOwoJazMgPSBzaW1bY11b
M10_PTEgYW5kIDEgb3IgMDsKCWwzID0gc2ltW2NdWzRdPj0xIGFuZCAxIG9yIDA7CgktLSBUaGUg
ZmlmdGggY29ybmVyIGhhcyBhbGwgY29vcmRpbmF0ZSBvZmZzZXRzID0gMSwgc28gbm8gbmVlZCB0
byBsb29rIHRoYXQgdXAuCglsb2NhbCB4MSA9IHgwIC0gaTEgKyBHNDsgLS0gT2Zmc2V0cyBmb3Ig
c2Vjb25kIGNvcm5lciBpbiAoeCx5LHosdykgY29vcmRzCglsb2NhbCB5MSA9IHkwIC0gajEgKyBH
NDsKCWxvY2FsIHoxID0gejAgLSBrMSArIEc0OwoJbG9jYWwgdzEgPSB3MCAtIGwxICsgRzQ7Cgls
b2NhbCB4MiA9IHgwIC0gaTIgKyAyLjAqRzQ7IC0tIE9mZnNldHMgZm9yIHRoaXJkIGNvcm5lciBp
biAoeCx5LHosdykgY29vcmRzCglsb2NhbCB5MiA9IHkwIC0gajIgKyAyLjAqRzQ7Cglsb2NhbCB6
MiA9IHowIC0gazIgKyAyLjAqRzQ7Cglsb2NhbCB3MiA9IHcwIC0gbDIgKyAyLjAqRzQ7Cglsb2Nh
bCB4MyA9IHgwIC0gaTMgKyAzLjAqRzQ7IC0tIE9mZnNldHMgZm9yIGZvdXJ0aCBjb3JuZXIgaW4g
KHgseSx6LHcpIGNvb3JkcwoJbG9jYWwgeTMgPSB5MCAtIGozICsgMy4wKkc0OwoJbG9jYWwgejMg
PSB6MCAtIGszICsgMy4wKkc0OwoJbG9jYWwgdzMgPSB3MCAtIGwzICsgMy4wKkc0OwoJbG9jYWwg
eDQgPSB4MCAtIDEuMCArIDQuMCpHNDsgLS0gT2Zmc2V0cyBmb3IgbGFzdCBjb3JuZXIgaW4gKHgs
eSx6LHcpIGNvb3JkcwoJbG9jYWwgeTQgPSB5MCAtIDEuMCArIDQuMCpHNDsKCWxvY2FsIHo0ID0g
ejAgLSAxLjAgKyA0LjAqRzQ7Cglsb2NhbCB3NCA9IHcwIC0gMS4wICsgNC4wKkc0OwoKCS0tIFdv
cmsgb3V0IHRoZSBoYXNoZWQgZ3JhZGllbnQgaW5kaWNlcyBvZiB0aGUgZml2ZSBzaW1wbGV4IGNv
cm5lcnMKCWxvY2FsIGlpID0gaSYyNTUKCWxvY2FsIGpqID0gaiYyNTUKCWxvY2FsIGtrID0gayYy
NTUKCWxvY2FsIGxsID0gbCYyNTUKCWxvY2FsIGdpMCA9IHBlcm1baWkrcGVybVtqaitwZXJtW2tr
K3Blcm1bbGxdXV1dICUgMzI7Cglsb2NhbCBnaTEgPSBwZXJtW2lpK2kxK3Blcm1bamorajErcGVy
bVtraytrMStwZXJtW2xsK2wxXV1dXSAlIDMyOwoJbG9jYWwgZ2kyID0gcGVybVtpaStpMitwZXJt
W2pqK2oyK3Blcm1ba2srazIrcGVybVtsbCtsMl1dXV0gJSAzMjsKCWxvY2FsIGdpMyA9IHBlcm1b
aWkraTMrcGVybVtqaitqMytwZXJtW2trK2szK3Blcm1bbGwrbDNdXV1dICUgMzI7Cglsb2NhbCBn
aTQgPSBwZXJtW2lpKzErcGVybVtqaisxK3Blcm1ba2srMStwZXJtW2xsKzFdXV1dICUgMzI7CgoJ
LS0gQ2FsY3VsYXRlIHRoZSBjb250cmlidXRpb24gZnJvbSB0aGUgZml2ZSBjb3JuZXJzCglsb2Nh
bCB0MCA9IDAuNSAtIHgwKngwIC0geTAqeTAgLSB6MCp6MCAtIHcwKncwOwoJaWYgKHQwPDApIHRo
ZW4KCQluMCA9IDAuMDsKCWVsc2UKCQl0MCA9IHQwKnQwOwoJCW4wID0gdDAgKiB0MCAqIERvdDRE
KEdyYWRpZW50czREW2dpMF0sIHgwLCB5MCwgejAsIHcwKTsKCWVuZAoKCWxvY2FsIHQxID0gMC41
IC0geDEqeDEgLSB5MSp5MSAtIHoxKnoxIC0gdzEqdzE7CglpZiAodDE8MCkgdGhlbgoJCW4xID0g
MC4wOwoJZWxzZSAKCQl0MSA9IHQxKnQxOwoJCW4xID0gdDEgKiB0MSAqIERvdDREKEdyYWRpZW50
czREW2dpMV0sIHgxLCB5MSwgejEsIHcxKTsKCWVuZAoKCWxvY2FsIHQyID0gMC41IC0geDIqeDIg
LSB5Mip5MiAtIHoyKnoyIC0gdzIqdzI7CglpZiAodDI8MCkgdGhlbgoJCW4yID0gMC4wOwoJZWxz
ZQoJCXQyID0gdDIqdDI7CgkJbjIgPSB0MiAqIHQyICogRG90NEQoR3JhZGllbnRzNERbZ2kyXSwg
eDIsIHkyLCB6MiwgdzIpOwoJZW5kCgoJbG9jYWwgdDMgPSAwLjUgLSB4Myp4MyAtIHkzKnkzIC0g
ejMqejMgLSB3Myp3MzsKCWlmICh0MzwwKSB0aGVuCgkJbjMgPSAwLjA7CgllbHNlIAoJCXQzID0g
dDMqdDM7CgkJbjMgPSB0MyAqIHQzICogRG90NEQoR3JhZGllbnRzNERbZ2kzXSwgeDMsIHkzLCB6
MywgdzMpOwoJZW5kCgoJbG9jYWwgdDQgPSAwLjUgLSB4NCp4NCAtIHk0Knk0IC0gejQqejQgLSB3
NCp3NDsKCWlmICh0NDwwKSB0aGVuCgkJbjQgPSAwLjA7CgllbHNlCgkJdDQgPSB0NCp0NDsKCQlu
NCA9IHQ0ICogdDQgKiBEb3Q0RChHcmFkaWVudHM0RFtnaTRdLCB4NCwgeTQsIHo0LCB3NCk7Cgll
bmQKCgktLSBTdW0gdXAgYW5kIHNjYWxlIHRoZSByZXN1bHQgdG8gY292ZXIgdGhlIHJhbmdlIFst
MSwxXQoKCWxvY2FsIHJldHZhbCA9IDI3LjAgKiAobjAgKyBuMSArIG4yICsgbjMgKyBuNCkKCglp
ZiBzaW1wbGV4LmludGVybmFsQ2FjaGUgdGhlbgoJCWlmIG5vdCBQcmV2NERbeF0gdGhlbiBQcmV2
NERbeF0gPSB7fSBlbmQKCQlpZiBub3QgUHJldjREW3hdW3ldIHRoZW4gUHJldjREW3hdW3ldID0g
e30gZW5kCgkJaWYgbm90IFByZXY0RFt4XVt5XVt6XSB0aGVuIFByZXY0RFt4XVt5XVt6XSA9IHt9
IGVuZAoJCVByZXY0RFt4XVt5XVt6XVt3XSA9IHJldHZhbAoJZW5kCgoJcmV0dXJuIHJldHZhbDsK
CmVuZCAKCmxvY2FsIGUgPSAyLjcxODI4MTgyODQ1OTA0NTIzNTM2Cgpsb2NhbCBQcmV2Qmx1cjJE
ID0ge30KCmZ1bmN0aW9uIHNpbXBsZXguR0JsdXIyRCh4LHksc3RkRGV2KQoJaWYgc2ltcGxleC5p
bnRlcm5hbENhY2hlIGFuZCBQcmV2Qmx1cjJEW3hdIGFuZCBQcmV2Qmx1cjJEW3hdW3ldIGFuZCBQ
cmV2Qmx1cjJEW3hdW3ldW3N0ZERldl0gdGhlbiByZXR1cm4gUHJldkJsdXIyRFt4XVt5XVtzdGRE
ZXZdIGVuZAoJbG9jYWwgcHdyID0gKCh4XjIreV4yKS8oMiooc3RkRGV2XjIpKSkqLTEKCWxvY2Fs
IHJldCA9ICgxLygyKm1hdGgucGkqKHN0ZERldl4yKSkpKihlXnB3cikKCglpZiBzaW1wbGV4Lmlu
dGVybmFsQ2FjaGUgdGhlbgoJCWlmIG5vdCBQcmV2Qmx1cjJEW3hdIHRoZW4gUHJldkJsdXIyRFt4
XSA9IHt9IGVuZAoJCWlmIG5vdCBQcmV2Qmx1cjJEW3hdW3ldIHRoZW4gUHJldkJsdXIyRFt4XVt5
XSA9IHt9IGVuZAoJCVByZXZCbHVyMkRbeF1beV1bc3RkRGV2XSA9IHJldAoJZW5kCglyZXR1cm4g
cmV0CmVuZCAKCmxvY2FsIFByZXZCbHVyMUQgPSB7fQoKZnVuY3Rpb24gc2ltcGxleC5HQmx1cjFE
KHgsc3RkRGV2KQoJaWYgc2ltcGxleC5pbnRlcm5hbENhY2hlIGFuZCBQcmV2Qmx1cjFEW3hdIGFu
ZCBQcmV2Qmx1cjFEW3hdW3N0ZERldl0gdGhlbiByZXR1cm4gUHJldkJsdXIxRFt4XVtzdGREZXZd
IGVuZAoJbG9jYWwgcHdyID0gKHheMi8oMipzdGREZXZeMikpKi0xCglsb2NhbCByZXQgPSAoMS8o
bWF0aC5zcXJ0KDIqbWF0aC5waSkqc3RkRGV2KSkqKGVecHdyKQoKCWlmIHNpbXBsZXguaW50ZXJu
YWxDYWNoZSB0aGVuCgkJaWYgbm90IFByZXZCbHVyMURbeF0gdGhlbiBQcmV2Qmx1cjFEW3hdID0g
e30gZW5kCgkJUHJldkJsdXIxRFt4XVtzdGREZXZdID0gcmV0CgllbmQKCXJldHVybiByZXQKZW5k
CgpmdW5jdGlvbiBzaW1wbGV4LkZyYWN0YWxTdW0oZnVuYywgaXRlciwgLi4uKQogICAgbG9jYWwg
cmV0ID0gZnVuYyguLi4pCiAgICBmb3IgaT0xLGl0ZXIgZG8KICAgICAgICBsb2NhbCBwb3dlciA9
IDJeaXRlcgogICAgICAgIGxvY2FsIHMgPSBwb3dlci9pCgogICAgICAgIGxvY2FsIHNjYWxlZCA9
IHt9CiAgICAgICAgZm9yIGVsZW0gaW4gaXBhaXJzKHsuLi59KSBkbwogICAgICAgICAgICB0YWJs
ZS5pbnNlcnQoc2NhbGVkLCBlbGVtKnMpCiAgICAgICAgZW5kCiAgICAgICAgcmV0ID0gcmV0ICsg
KGkvcG93ZXIpKihmdW5jKHVucGFjayhzY2FsZWQpKSkKICAgIGVuZAogICAgcmV0dXJuIHJldApl
bmQKCmZ1bmN0aW9uIHNpbXBsZXguRnJhY3RhbFN1bUFicyhmdW5jLCBpdGVyLCAuLi4pCiAgICBs
b2NhbCByZXQgPSBtYXRoLmFicyhmdW5jKC4uLikpCiAgICBmb3IgaT0xLGl0ZXIgZG8KICAgICAg
ICBsb2NhbCBwb3dlciA9IDJeaXRlcgogICAgICAgIGxvY2FsIHMgPSBwb3dlci9pCgogICAgICAg
IGxvY2FsIHNjYWxlZCA9IHt9CiAgICAgICAgZm9yIGVsZW0gaW4gaXBhaXJzKHsuLi59KSBkbwog
ICAgICAgICAgICB0YWJsZS5pbnNlcnQoc2NhbGVkLCBlbGVtKnMpCiAgICAgICAgZW5kCiAgICAg
ICAgcmV0ID0gcmV0ICsgKGkvcG93ZXIpKihtYXRoLmFicyhmdW5jKHVucGFjayhzY2FsZWQpKSkp
CiAgICBlbmQKICAgIHJldHVybiByZXQKZW5kCgpmdW5jdGlvbiBzaW1wbGV4LlR1cmJ1bGVuY2Uo
ZnVuYywgZGlyZWN0aW9uLCBpdGVyLCAuLi4pCiAgICBsb2NhbCByZXQgPSBtYXRoLmFicyhmdW5j
KC4uLikpCiAgICBmb3IgaT0xLGl0ZXIgZG8KICAgICAgICBsb2NhbCBwb3dlciA9IDJeaXRlcgog
ICAgICAgIGxvY2FsIHMgPSBwb3dlci9pCgogICAgICAgIGxvY2FsIHNjYWxlZCA9IHt9CiAgICAg
ICAgZm9yIGVsZW0gaW4gaXBhaXJzKHsuLi59KSBkbwogICAgICAgICAgICB0YWJsZS5pbnNlcnQo
c2NhbGVkLCBlbGVtKnMpCiAgICAgICAgZW5kCiAgICAgICAgcmV0ID0gcmV0ICsgKGkvcG93ZXIp
KihtYXRoLmFicyhmdW5jKHVucGFjayhzY2FsZWQpKSkpCiAgICBlbmQKICAgIGxvY2FsIGFyZ3Mg
PSB7Li4ufQogICAgbG9jYWwgZGlyX2NvbXBvbmVudCA9IGFyZ3NbZGlyZWN0aW9uKzFdCiAgICBy
ZXR1cm4gbWF0aC5zaW4oZGlyX2NvbXBvbmVudCtyZXQpCmVuZA==
:: util.lua
--[[pod_format="raw",created="2025-04-12 19:25:23",modified="2025-04-14 21:24:47",revision=857]]
function prints(s,x,y,c)
	print(s,x+2,y+2,19)
	print(s,x+1,y+1,19)
	print(s,x-1,y-1,19)
	print(s,x,y,c or 7)
end

function real_count(t)
	local c = 0
	for i,v in pairs(t) do c+=1 end
	return c
end

function indexof(t,iv)
	for i,ov in pairs(t) do if iv == ov then return i end end
end
:: world_interaction.lua
--[[pod_format="raw",created="2025-04-16 12:52:53",modified="2025-04-21 00:22:22",revision=413]]
include "constants.lua"
include "chunk.lua"

WORLD_MOUSE_X = 0
WORLD_MOUSE_Y = 0

function update_world_mouse(camera_x, camera_y)
	local g_mouse_x, g_mouse_y, g_mouse_b, g_wheel_x, g_wheel_y = mouse()
	local left_down = g_mouse_b & 0x1 > 0
	local right_down = g_mouse_b & 0x2 > 0
	local wheel_delta = sgn(g_wheel_y)
	WORLD_MOUSE_X = flr((camera_x + g_mouse_x) / TILE_SIZE)
	WORLD_MOUSE_Y = flr((camera_y + g_mouse_y) / TILE_SIZE)
	
	dbg(left_down and "Yay" or "Nay")
	dbg(g_mouse_b)
	if (left_down) then
		chunk.set_block_in_world(WORLD_MOUSE_X, WORLD_MOUSE_Y, 1)
	end
	
	if (right_down) then
		chunk.set_block_in_world(WORLD_MOUSE_X, WORLD_MOUSE_Y, 0)
	end
end

function draw_world_mouse()
	local rx = WORLD_MOUSE_X * TILE_SIZE
	local ry = WORLD_MOUSE_Y * TILE_SIZE
	fillp(0b1010010110100101)
	rect(rx+1, ry+1, rx+TILE_SIZE, ry+TILE_SIZE, 1)
	rect(rx, ry, rx+TILE_SIZE-1, ry+TILE_SIZE-1, 7)
	fillp()
end
:: .info.pod
b64$LS1bW3BvZCxiYnNfaWQ9Il9kZXYyMjc5IixjcmVhdGVkPSIyMDI1LTA0LTA5IDE5OjUwOjMx
IixpY29uPXVzZXJkYXRhKCJ1OCIsMTYsMTYsIjAwMDAwMDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAw
MDAwMDAwMDAxMDcwNzA3MDcwNzA3MDcwNzA3MDcwMTAwMDAwMDAxMDcxNTE1MTUwYTBhMGEwYTE1
MTUxNTA3MDEwMDAxMDcxNTE1MTUwYTBhMDkwNjA3MGExNTE1MTUwNzAxMDEwNzE1MTUxNTA5MDkw
OTA3MDcwOTE1MTUxNTA3MDEwMTA3MTUxNTE5MTkxOTE5MTkxOTE5MTkxNTE1MDcwMTAxMDcxNTE1
MTUwNzA3MDEwNzA3MDExNTE1MTUwNzAxMDEwNzE1MTUxNTA3MDcwMTA3MDcwMTE1MTUxNTA3MDEw
MTA3MTUxNTE1MTAwNzA3MDcwNzA3MTUxNTE1MDcwMTAxMDcxNTE1MTUwNzEwMDcwNzA3MDcxNTE1
MTUwNzAxMDEwNzAxMTUxNTEwMTAxMDEwMTAxMDE1MTUxNTA3MDEwMTA2MDcxNTE1MTAxMDAxMDEx
MDEwMTUxNTA3MDYwMTAxMDYwNjA3MDcwNzA3MDcwNzA3MDcwNzA3MDYwNjAxMDAwMTA2MDYwNjA2
MDYwNjA2MDYwNjA2MDYwNjAxMDAwMDAwMDEwNjA2MDYwNjA2MDYwNjA2MDYwNjAxMDAwMDAwMDAw
MDAxMDEwMTAxMDEwMTAxMDEwMTAxMDAwMDAwIiksbG93Y29sX2ljb249ZmFsc2UsbW9kaWZpZWQ9
IjIwMjUtMDQtMjEgMTg6MTI6MzEiLHJ1bnRpbWU9MTcsc2FuZGJveD1mYWxzZSx3b3Jrc3BhY2Vz
PXt7bG9jYXRpb249Im1haW4ubHVhIzEwIix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJj
aHVuay5sdWEjMTc4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJlbnRpdHkubHVhIzE3
Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJjb25zdGFudHMubHVhIzE4Iix3b3Jrc3Bh
Y2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZW5lcmF0b3IubHVhIzE3Iix3b3Jrc3BhY2VfaW5kZXg9
MX0se2xvY2F0aW9uPSJlbnRpdGllcy9wbGF5ZXIubHVhIzg3Iix3b3Jrc3BhY2VfaW5kZXg9MX0s
e2xvY2F0aW9uPSJlbnRpdGllcy9iYXNlLmx1YSMyNyIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2Nh
dGlvbj0ibm9pc2UubHVhIzI5NyIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iZ2Z4LzAu
Z2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJnZngvMS5nZngiLHdvcmtzcGFjZV9p
bmRleD0yfSx7bG9jYXRpb249Im1hcC9kZWJ1Zy5tYXAiLHdvcmtzcGFjZV9pbmRleD0zfSx7bG9j
YXRpb249InNmeC8wLnNmeCIsd29ya3NwYWNlX2luZGV4PTR9fV1d
:: [eoc]
